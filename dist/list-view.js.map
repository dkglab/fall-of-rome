{
  "version": 3,
  "sources": ["../../node_modules/oxigraph/web.js", "../src/list-view.ts", "../src/mock-triplestore.ts", "../src/graph-store.ts"],
  "sourcesContent": ["let wasm;\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_2.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_2.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n/**\n * @param {string} value\n * @returns {NamedNode}\n */\nexport function namedNode(value) {\n    const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.namedNode(ptr0, len0);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return NamedNode.__wrap(ret[0]);\n}\n\n/**\n * @param {string | null} [value]\n * @returns {BlankNode}\n */\nexport function blankNode(value) {\n    var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    const ret = wasm.blankNode(ptr0, len0);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return BlankNode.__wrap(ret[0]);\n}\n\n/**\n * @param {string | null | undefined} value\n * @param {any} language_or_datatype\n * @returns {Literal}\n */\nexport function literal(value, language_or_datatype) {\n    var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    const ret = wasm.literal(ptr0, len0, language_or_datatype);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return Literal.__wrap(ret[0]);\n}\n\n/**\n * @returns {DefaultGraph}\n */\nexport function defaultGraph() {\n    const ret = wasm.defaultGraph();\n    return DefaultGraph.__wrap(ret);\n}\n\n/**\n * @param {string} value\n * @returns {Variable}\n */\nexport function variable(value) {\n    const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.variable(ptr0, len0);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return Variable.__wrap(ret[0]);\n}\n\n/**\n * @param {any} subject\n * @param {any} predicate\n * @param {any} object\n * @returns {Quad}\n */\nexport function triple(subject, predicate, object) {\n    const ret = wasm.triple(subject, predicate, object);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return Quad.__wrap(ret[0]);\n}\n\n/**\n * @param {any} subject\n * @param {any} predicate\n * @param {any} object\n * @param {any} graph\n * @returns {Quad}\n */\nexport function quad(subject, predicate, object, graph) {\n    const ret = wasm.quad(subject, predicate, object, graph);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return Quad.__wrap(ret[0]);\n}\n\n/**\n * @param {any} original\n * @returns {any}\n */\nexport function fromTerm(original) {\n    const ret = wasm.fromTerm(original);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\n/**\n * @param {any} original\n * @returns {any}\n */\nexport function fromQuad(original) {\n    const ret = wasm.fromQuad(original);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return takeFromExternrefTable0(ret[0]);\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(wasm.__wbindgen_export_2.get(mem.getUint32(i, true)));\n    }\n    wasm.__externref_drop_slice(ptr, len);\n    return result;\n}\n\nexport function main() {\n    wasm.main();\n}\n\nconst BlankNodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_blanknode_free(ptr >>> 0, 1));\n\nexport class BlankNode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BlankNode.prototype);\n        obj.__wbg_ptr = ptr;\n        BlankNodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BlankNodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blanknode_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get termType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.blanknode_term_type(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    get value() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.blanknode_value(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.blanknode_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {any} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        const ret = wasm.blanknode_equals(this.__wbg_ptr, other);\n        return ret !== 0;\n    }\n}\n\nconst DefaultGraphFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_defaultgraph_free(ptr >>> 0, 1));\n\nexport class DefaultGraph {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DefaultGraph.prototype);\n        obj.__wbg_ptr = ptr;\n        DefaultGraphFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DefaultGraphFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_defaultgraph_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get termType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.defaultgraph_term_type(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    get value() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.defaultgraph_value(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.defaultgraph_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {any} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        const ret = wasm.defaultgraph_equals(this.__wbg_ptr, other);\n        return ret !== 0;\n    }\n}\n\nconst LiteralFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_literal_free(ptr >>> 0, 1));\n\nexport class Literal {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Literal.prototype);\n        obj.__wbg_ptr = ptr;\n        LiteralFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LiteralFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_literal_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get termType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.literal_term_type(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    get value() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.literal_value(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    get language() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.literal_language(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {NamedNode}\n     */\n    get datatype() {\n        const ret = wasm.literal_datatype(this.__wbg_ptr);\n        return NamedNode.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.literal_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {any} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        const ret = wasm.literal_equals(this.__wbg_ptr, other);\n        return ret !== 0;\n    }\n}\n\nconst NamedNodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_namednode_free(ptr >>> 0, 1));\n\nexport class NamedNode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(NamedNode.prototype);\n        obj.__wbg_ptr = ptr;\n        NamedNodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        NamedNodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_namednode_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get termType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.namednode_term_type(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    get value() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.namednode_value(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.namednode_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {any} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        const ret = wasm.namednode_equals(this.__wbg_ptr, other);\n        return ret !== 0;\n    }\n}\n\nconst QuadFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_quad_free(ptr >>> 0, 1));\n\nexport class Quad {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Quad.prototype);\n        obj.__wbg_ptr = ptr;\n        QuadFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QuadFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_quad_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get termType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.quad_term_type(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    get value() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.quad_value(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    get subject() {\n        const ret = wasm.quad_subject(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {any}\n     */\n    get predicate() {\n        const ret = wasm.quad_predicate(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {any}\n     */\n    get object() {\n        const ret = wasm.quad_object(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {any}\n     */\n    get graph() {\n        const ret = wasm.quad_graph(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.quad_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {any} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        const ret = wasm.quad_equals(this.__wbg_ptr, other);\n        return ret !== 0;\n    }\n}\n\nconst StoreFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_store_free(ptr >>> 0, 1));\n\nexport class Store {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StoreFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_store_free(ptr, 0);\n    }\n    /**\n     * @param {any} quads\n     */\n    constructor(quads) {\n        const ret = wasm.store_new(quads);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        StoreFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {any} quad\n     */\n    add(quad) {\n        const ret = wasm.store_add(this.__wbg_ptr, quad);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * @param {any} quad\n     */\n    delete(quad) {\n        const ret = wasm.store_delete(this.__wbg_ptr, quad);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * @param {any} quad\n     * @returns {boolean}\n     */\n    has(quad) {\n        const ret = wasm.store_has(this.__wbg_ptr, quad);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] !== 0;\n    }\n    /**\n     * @returns {number}\n     */\n    get size() {\n        const ret = wasm.store_size(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] >>> 0;\n    }\n    /**\n     * @param {any} subject\n     * @param {any} predicate\n     * @param {any} object\n     * @param {any} graph_name\n     * @returns {any[]}\n     */\n    match(subject, predicate, object, graph_name) {\n        const ret = wasm.store_match(this.__wbg_ptr, subject, predicate, object, graph_name);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * @param {string} query\n     * @param {any} options\n     * @returns {any}\n     */\n    query(query, options) {\n        const ptr0 = passStringToWasm0(query, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.store_query(this.__wbg_ptr, ptr0, len0, options);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * @param {string} update\n     * @param {any} options\n     */\n    update(update, options) {\n        const ptr0 = passStringToWasm0(update, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.store_update(this.__wbg_ptr, ptr0, len0, options);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * @param {string} data\n     * @param {any} options\n     * @param {any} base_iri\n     * @param {any} to_graph_name\n     */\n    load(data, options, base_iri, to_graph_name) {\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.store_load(this.__wbg_ptr, ptr0, len0, options, base_iri, to_graph_name);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * @param {any} options\n     * @param {any} from_graph_name\n     * @returns {string}\n     */\n    dump(options, from_graph_name) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.store_dump(this.__wbg_ptr, options, from_graph_name);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n}\n\nconst VariableFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_variable_free(ptr >>> 0, 1));\n\nexport class Variable {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Variable.prototype);\n        obj.__wbg_ptr = ptr;\n        VariableFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VariableFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_variable_free(ptr, 0);\n    }\n    /**\n     * @returns {string}\n     */\n    get termType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.variable_term_type(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    get value() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.variable_value(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.variable_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @param {any} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        const ret = wasm.variable_equals(this.__wbg_ptr, other);\n        return ret !== 0;\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_blanknode_new = function(arg0) {\n        const ret = BlankNode.__wrap(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_buffer_609cc3eee51ed158 = function(arg0) {\n        const ret = arg0.buffer;\n        return ret;\n    };\n    imports.wbg.__wbg_call_672a4d21634d4a24 = function() { return handleError(function (arg0, arg1) {\n        const ret = arg0.call(arg1);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_call_7cccdd69e0791ae2 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = arg0.call(arg1, arg2);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_crypto_ed58b8e10a292839 = function(arg0) {\n        const ret = arg0.crypto;\n        return ret;\n    };\n    imports.wbg.__wbg_defaultgraph_new = function(arg0) {\n        const ret = DefaultGraph.__wrap(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_done_769e5ede4b31c67b = function(arg0) {\n        const ret = arg0.done;\n        return ret;\n    };\n    imports.wbg.__wbg_error_7534b8e9a36f1ab4 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_getRandomValues_bcb4912f16000dc4 = function() { return handleError(function (arg0, arg1) {\n        arg0.getRandomValues(arg1);\n    }, arguments) };\n    imports.wbg.__wbg_get_67b2ba62fc30de12 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(arg0, arg1);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_has_a5ea9117f258a0ec = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(arg0, arg1);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_iterator_9a24c88df860dc65 = function() {\n        const ret = Symbol.iterator;\n        return ret;\n    };\n    imports.wbg.__wbg_literal_new = function(arg0) {\n        const ret = Literal.__wrap(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_msCrypto_0a36e2ec3a343d26 = function(arg0) {\n        const ret = arg0.msCrypto;\n        return ret;\n    };\n    imports.wbg.__wbg_namednode_new = function(arg0) {\n        const ret = NamedNode.__wrap(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_new_232bf76aa774bea9 = function(arg0, arg1) {\n        const ret = new URIError(getStringFromWasm0(arg0, arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_new_5e0be73521bc8c17 = function() {\n        const ret = new Map();\n        return ret;\n    };\n    imports.wbg.__wbg_new_78feb108b6472713 = function() {\n        const ret = new Array();\n        return ret;\n    };\n    imports.wbg.__wbg_new_8a6f238a6ece86ea = function() {\n        const ret = new Error();\n        return ret;\n    };\n    imports.wbg.__wbg_new_a12002a7f91c75be = function(arg0) {\n        const ret = new Uint8Array(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_new_c68d7209be747379 = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_105ed471475aaf50 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_a381634e90c276d4 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_next_25feadfc0913fea9 = function(arg0) {\n        const ret = arg0.next;\n        return ret;\n    };\n    imports.wbg.__wbg_next_6574e1a8a62d1055 = function() { return handleError(function (arg0) {\n        const ret = arg0.next();\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_node_02999533c4ea02e3 = function(arg0) {\n        const ret = arg0.node;\n        return ret;\n    };\n    imports.wbg.__wbg_now_807e54c39636c349 = function() {\n        const ret = Date.now();\n        return ret;\n    };\n    imports.wbg.__wbg_process_5c1d670bc53614b8 = function(arg0) {\n        const ret = arg0.process;\n        return ret;\n    };\n    imports.wbg.__wbg_push_737cfc8c1432c2c6 = function(arg0, arg1) {\n        const ret = arg0.push(arg1);\n        return ret;\n    };\n    imports.wbg.__wbg_quad_new = function(arg0) {\n        const ret = Quad.__wrap(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_randomFillSync_ab2cfe79ebbf2740 = function() { return handleError(function (arg0, arg1) {\n        arg0.randomFillSync(arg1);\n    }, arguments) };\n    imports.wbg.__wbg_require_79b1e9274cde3c87 = function() { return handleError(function () {\n        const ret = module.require;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_set_65595bdd868b3009 = function(arg0, arg1, arg2) {\n        arg0.set(arg1, arg2 >>> 0);\n    };\n    imports.wbg.__wbg_set_8fc6bf8a5b1071d1 = function(arg0, arg1, arg2) {\n        const ret = arg0.set(arg1, arg2);\n        return ret;\n    };\n    imports.wbg.__wbg_stack_0ed75d68575b0f3c = function(arg0, arg1) {\n        const ret = arg1.stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbg_static_accessor_GLOBAL_88a902d13a557d07 = function() {\n        const ret = typeof global === 'undefined' ? null : global;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0 = function() {\n        const ret = typeof globalThis === 'undefined' ? null : globalThis;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_SELF_37c5d418e4bf5819 = function() {\n        const ret = typeof self === 'undefined' ? null : self;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_WINDOW_5de37043a91a9c40 = function() {\n        const ret = typeof window === 'undefined' ? null : window;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_subarray_aa9065fa9dc5df96 = function(arg0, arg1, arg2) {\n        const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_value_cd1ffa7b1ab794f1 = function(arg0) {\n        const ret = arg0.value;\n        return ret;\n    };\n    imports.wbg.__wbg_variable_new = function(arg0) {\n        const ret = Variable.__wrap(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_versions_c71aa1626a93e0a1 = function(arg0) {\n        const ret = arg0.versions;\n        return ret;\n    };\n    imports.wbg.__wbg_warn_eb0bc5894227877a = function(arg0, arg1) {\n        console.warn(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_error_new = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return ret;\n    };\n    imports.wbg.__wbindgen_init_externref_table = function() {\n        const table = wasm.__wbindgen_export_2;\n        const offset = table.grow(4);\n        table.set(0, undefined);\n        table.set(offset + 0, undefined);\n        table.set(offset + 1, null);\n        table.set(offset + 2, true);\n        table.set(offset + 3, false);\n        ;\n    };\n    imports.wbg.__wbindgen_is_falsy = function(arg0) {\n        const ret = !arg0;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(arg0) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_null = function(arg0) {\n        const ret = arg0 === null;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = arg0;\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(arg0) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = arg0 === undefined;\n        return ret;\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return ret;\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = arg1;\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, memory) {\n\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedDataViewMemory0 = null;\n    cachedUint8ArrayMemory0 = null;\n\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module !== 'undefined') {\n        if (Object.getPrototypeOf(module) === Object.prototype) {\n            ({module} = module)\n        } else {\n            console.warn('using deprecated parameters for `initSync()`; pass a single object instead')\n        }\n    }\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(module_or_path) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module_or_path !== 'undefined') {\n        if (Object.getPrototypeOf(module_or_path) === Object.prototype) {\n            ({module_or_path} = module_or_path)\n        } else {\n            console.warn('using deprecated parameters for the initialization function; pass a single object instead')\n        }\n    }\n\n    if (typeof module_or_path === 'undefined') {\n        module_or_path = new URL('web_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof module_or_path === 'string' || (typeof Request === 'function' && module_or_path instanceof Request) || (typeof URL === 'function' && module_or_path instanceof URL)) {\n        module_or_path = fetch(module_or_path);\n    }\n\n    __wbg_init_memory(imports);\n\n    const { instance, module } = await __wbg_load(await module_or_path, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync };\nexport default __wbg_init;\n", "// list-view.ts\nimport init from \"oxigraph/web.js\";\nimport GraphStore from \"./graph-store\";\nimport LongList from \"./long-list\";\n\nfunction main() {\n  (async function () {\n    await init(\"web_bg.wasm\"); // Required to compile the WebAssembly code.\n\n    // Connect to the SPARQL endpoint\n    const store = new GraphStore(\"http://localhost:3030/sites/query\");\n\n    const items = [];\n    try {\n      // Load and execute the sites.rq query\n      const response = await fetch('/queries/sites.rq');\n      const sitesQuery = await response.text();\n\n      // Execute SPARQL query\n      for (const binding of await store.query(sitesQuery)) {\n        items.push({\n          id: binding.get(\"id\")!.value,\n          name: binding.get(\"site_name\")!.value,\n        });\n      }\n\n      const list = document.getElementById(\"sites-list\") as LongList;\n      list.items = items;\n    } catch (error) {\n      console.error(\"Error fetching sites:\", error);\n    }\n  })();\n}\n\nmain();", "// mock-triplestore.ts\n// Ensure oxigraph is imported correctly\nlet oxigraph: any;\ntry {\n  // Import oxigraph dynamically to handle potential loading issues\n  import('oxigraph/web.js').then(module => {\n    oxigraph = module;\n    console.log(\"Oxigraph module loaded successfully\");\n  }).catch(error => {\n    console.error(\"Failed to load oxigraph module:\", error);\n  });\n} catch (error) {\n  console.error(\"Error importing oxigraph:\", error);\n}\n\n/**\n * A class that simulates a SPARQL endpoint using Oxigraph in-browser store\n */\nexport class MockTriplestore {\n  private store: any = null;\n  private initialized: boolean = false;\n  private fallbackMode: boolean = false;\n\n  constructor() {\n    // Defer store creation until initialization\n    console.log(\"Mock triplestore created\");\n  }\n\n  /**\n   * Initialize the store with data from TTL file\n   */\n  async initialize(ttlUrl: string): Promise<void> {\n    if (this.initialized) return;\n    \n    try {\n      // Wait for oxigraph to be loaded\n      if (!oxigraph) {\n        console.log(\"Waiting for oxigraph to load...\");\n        await new Promise<void>(resolve => {\n          const checkInterval = setInterval(() => {\n            if (oxigraph) {\n              clearInterval(checkInterval);\n              resolve();\n            }\n          }, 100);\n          \n          // Timeout after 5 seconds\n          setTimeout(() => {\n            clearInterval(checkInterval);\n            this.fallbackMode = true;\n            console.warn(\"Oxigraph failed to load in time, using fallback mode\");\n            resolve();\n          }, 5000);\n        });\n      }\n      \n      // Try to create the store\n      if (oxigraph && !this.fallbackMode) {\n        try {\n          console.log(\"Creating oxigraph store...\");\n          this.store = new oxigraph.Store();\n          console.log(\"Oxigraph store created successfully\");\n          \n          // Try to load data\n          try {\n            const response = await fetch(ttlUrl);\n            if (response.ok) {\n              const ttlData = await response.text();\n              \n              const loadOptions = {\n                format: \"text/turtle\",\n                baseIRI: \"http://example.org/\"\n              };\n              \n              this.store.load(ttlData, loadOptions);\n              console.log(\"Data loaded into oxigraph store\");\n            } else {\n              console.warn(`Failed to fetch TTL data: ${response.status} ${response.statusText}`);\n            }\n          } catch (loadError) {\n            console.error(\"Error loading TTL data:\", loadError);\n          }\n        } catch (storeError) {\n          console.error(\"Failed to create oxigraph store:\", storeError);\n          this.fallbackMode = true;\n        }\n      } else {\n        this.fallbackMode = true;\n      }\n      \n      this.initialized = true;\n      console.log(`Mock triplestore initialized (fallback mode: ${this.fallbackMode})`);\n    } catch (error) {\n      console.error(\"Failed to initialize mock triplestore:\", error);\n      this.fallbackMode = true;\n      this.initialized = true;\n    }\n  }\n\n  /**\n   * Execute a SPARQL query against the in-memory store or return mock data\n   */\n  executeQuery(query: string): any {\n    if (!this.initialized) {\n      console.warn(\"Mock triplestore not initialized, using fallback data\");\n      return this.getFallbackResults(query);\n    }\n    \n    if (this.fallbackMode || !this.store) {\n      console.log(\"Using fallback data for query\");\n      return this.getFallbackResults(query);\n    }\n    \n    try {\n      // Execute the query against the oxigraph store\n      console.log(\"Executing query against oxigraph store\");\n      const results = this.store.query(query);\n      \n      // Convert results to SPARQL JSON format\n      const bindings: any[] = [];\n      \n      // Handle different result types\n      if (typeof results === 'boolean') {\n        return { \n          head: { vars: [] },\n          boolean: results \n        };\n      } else if (results && typeof results[Symbol.iterator] === 'function') {\n        // Process iterable results\n        for (const binding of results) {\n          const resultBinding: Record<string, any> = {};\n          \n          // Convert Map entries to object\n          if (binding instanceof Map) {\n            for (const [key, value] of binding) {\n              resultBinding[key] = this.termToObject(value);\n            }\n          } else if (oxigraph && binding instanceof oxigraph.Quad) {\n            // Handle quad results\n            resultBinding.subject = this.termToObject(binding.subject);\n            resultBinding.predicate = this.termToObject(binding.predicate);\n            resultBinding.object = this.termToObject(binding.object);\n            resultBinding.graph = this.termToObject(binding.graph);\n          }\n          \n          bindings.push(resultBinding);\n        }\n      }\n      \n      // Create vars array from the first binding's keys (if available)\n      const vars = bindings.length > 0 \n        ? Object.keys(bindings[0]) \n        : [];\n      \n      return {\n        head: { vars },\n        results: { bindings }\n      };\n    } catch (error) {\n      console.error(\"Error executing SPARQL query:\", error);\n      // Return fallback mock results based on the query type\n      return this.getFallbackResults(query);\n    }\n  }\n\n  /**\n   * Generate fallback results based on the query content\n   */\n  private getFallbackResults(query: string): any {\n    // Create empty response structure\n    const response = {\n      head: { vars: [\"id\", \"name\"] },\n      results: { bindings: [] as any[] }\n    };\n    \n    // Add mock data based on query content\n    if (query.includes('located-sites') || query.toLowerCase().includes('site_name')) {\n      this.addSiteData(response);\n    } else if (query.includes('site-types')) {\n      this.addSiteTypes(response);\n    } else if (query.includes('roman-provinces')) {\n      this.addProvinces(response);\n    } else if (query.includes('municipalities')) {\n      this.addMunicipalities(response);\n    } else if (query.includes('ceramic-types')) {\n      this.addCeramicTypes(response);\n    } else if (query.includes('analytic-regions')) {\n      this.addAnalyticRegions(response);\n    }\n    \n    return response;\n  }\n  \n  // Helper methods to add mock data to response\n  \n  private addSiteData(response: any): void {\n    response.head.vars = [\"id\", \"site_name\", \"latitude\", \"longitude\", \"municipality\", \"siteType\", \"analysisType\", \"region\", \"provincia\", \"TSH\", \"TSHT\", \"TSHTB\", \"TSHTM\", \"TSG\", \"DSP\", \"ARSA\", \"ARSC\", \"ARSD\", \"LRC\", \"LRD\", \"PRCW\", \"TS_any\", \"TS_early\", \"TS_late\", \"ARS_325\", \"ARS_400\", \"ARS_450\", \"ARS_525\", \"ARS_600\", \"Coin_pre234\", \"Coin_C3crisis\", \"Coins_tetrarchy\", \"Coin_C4_E\", \"Coin_C4_L\", \"Coin_C5\", \"Coin_Just\"];\n    \n    response.results.bindings = [\n      {\n        id: { type: 'literal', value: 'site1' },\n        site_name: { type: 'literal', value: 'Lucentum' },\n        latitude: { type: 'literal', value: '38.3572' },\n        longitude: { type: 'literal', value: '-0.4519' },\n        municipality: { type: 'literal', value: 'Alicante' },\n        siteType: { type: 'literal', value: 'urban' },\n        analysisType: { type: 'literal', value: 'excavation' },\n        region: { type: 'literal', value: 'Tarraconensis' },\n        provincia: { type: 'literal', value: 'Hispania Citerior' },\n        TSH: { type: 'literal', value: '1' },\n        TSHT: { type: 'literal', value: '0' },\n        TSHTB: { type: 'literal', value: '0' },\n        TSHTM: { type: 'literal', value: '0' },\n        TSG: { type: 'literal', value: '1' },\n        DSP: { type: 'literal', value: '0' },\n        ARSA: { type: 'literal', value: '1' },\n        ARSC: { type: 'literal', value: '1' },\n        ARSD: { type: 'literal', value: '1' },\n        LRC: { type: 'literal', value: '0' },\n        LRD: { type: 'literal', value: '0' },\n        PRCW: { type: 'literal', value: '0' },\n        TS_any: { type: 'literal', value: '1' },\n        TS_early: { type: 'literal', value: '1' },\n        TS_late: { type: 'literal', value: '0' },\n        ARS_325: { type: 'literal', value: '1' },\n        ARS_400: { type: 'literal', value: '1' },\n        ARS_450: { type: 'literal', value: '0' },\n        ARS_525: { type: 'literal', value: '0' },\n        ARS_600: { type: 'literal', value: '0' },\n        Coin_pre234: { type: 'literal', value: '1' },\n        Coin_C3crisis: { type: 'literal', value: '1' },\n        Coins_tetrarchy: { type: 'literal', value: '0' },\n        Coin_C4_E: { type: 'literal', value: '0' },\n        Coin_C4_L: { type: 'literal', value: '0' },\n        Coin_C5: { type: 'literal', value: '0' },\n        Coin_Just: { type: 'literal', value: '0' }\n      },\n      {\n        id: { type: 'literal', value: 'site2' },\n        site_name: { type: 'literal', value: 'Tarraco' },\n        latitude: { type: 'literal', value: '41.1188' },\n        longitude: { type: 'literal', value: '1.2542' },\n        municipality: { type: 'literal', value: 'Tarragona' },\n        siteType: { type: 'literal', value: 'urban' },\n        analysisType: { type: 'literal', value: 'excavation' },\n        region: { type: 'literal', value: 'Tarraconensis' },\n        provincia: { type: 'literal', value: 'Hispania Citerior' },\n        TSH: { type: 'literal', value: '1' },\n        TSHT: { type: 'literal', value: '1' },\n        TSHTB: { type: 'literal', value: '0' },\n        TSHTM: { type: 'literal', value: '0' },\n        TSG: { type: 'literal', value: '1' },\n        DSP: { type: 'literal', value: '1' },\n        ARSA: { type: 'literal', value: '1' },\n        ARSC: { type: 'literal', value: '1' },\n        ARSD: { type: 'literal', value: '1' },\n        LRC: { type: 'literal', value: '1' },\n        LRD: { type: 'literal', value: '0' },\n        PRCW: { type: 'literal', value: '0' },\n        TS_any: { type: 'literal', value: '1' },\n        TS_early: { type: 'literal', value: '1' },\n        TS_late: { type: 'literal', value: '1' },\n        ARS_325: { type: 'literal', value: '1' },\n        ARS_400: { type: 'literal', value: '1' },\n        ARS_450: { type: 'literal', value: '1' },\n        ARS_525: { type: 'literal', value: '1' },\n        ARS_600: { type: 'literal', value: '0' },\n        Coin_pre234: { type: 'literal', value: '1' },\n        Coin_C3crisis: { type: 'literal', value: '1' },\n        Coins_tetrarchy: { type: 'literal', value: '1' },\n        Coin_C4_E: { type: 'literal', value: '1' },\n        Coin_C4_L: { type: 'literal', value: '1' },\n        Coin_C5: { type: 'literal', value: '1' },\n        Coin_Just: { type: 'literal', value: '0' }\n      }\n    ];\n  }\n  \n  private addSiteTypes(response: any): void {\n    response.head.vars = [\"id\", \"name\", \"label\"];\n    \n    response.results.bindings = [\n      {\n        id: { type: 'literal', value: 'urban' },\n        name: { type: 'literal', value: 'Urban' },\n        label: { type: 'literal', value: 'Urban Settlement' }\n      },\n      {\n        id: { type: 'literal', value: 'rural' },\n        name: { type: 'literal', value: 'Rural' },\n        label: { type: 'literal', value: 'Rural Settlement' }\n      }\n    ];\n  }\n  \n  private addProvinces(response: any): void {\n    response.head.vars = [\"id\", \"name\", \"geojson\"];\n    \n    response.results.bindings = [\n      {\n        id: { type: 'literal', value: 'province1' },\n        name: { type: 'literal', value: 'Hispania Citerior' },\n        geojson: { type: 'literal', value: '{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[0,40],[2,40],[2,42],[0,42],[0,40]]]}}' }\n      }\n    ];\n  }\n  \n  private addMunicipalities(response: any): void {\n    response.head.vars = [\"id\", \"name\", \"region\"];\n    \n    response.results.bindings = [\n      {\n        id: { type: 'literal', value: 'mun1' },\n        name: { type: 'literal', value: 'Alicante' },\n        region: { type: 'literal', value: 'Tarraconensis' }\n      },\n      {\n        id: { type: 'literal', value: 'mun2' },\n        name: { type: 'literal', value: 'Tarragona' },\n        region: { type: 'literal', value: 'Tarraconensis' }\n      }\n    ];\n  }\n  \n  private addCeramicTypes(response: any): void {\n    response.head.vars = [\"id\", \"name\", \"description\", \"period\"];\n    \n    response.results.bindings = [\n      {\n        id: { type: 'literal', value: 'TSH' },\n        name: { type: 'literal', value: 'Terra Sigillata Hispanic' },\n        description: { type: 'literal', value: 'Roman ceramic produced in Hispanic workshops' },\n        period: { type: 'literal', value: 'early-roman' }\n      },\n      {\n        id: { type: 'literal', value: 'TSHT' },\n        name: { type: 'literal', value: 'Late Hispanic Terra Sigillata' },\n        description: { type: 'literal', value: 'Late Roman ceramic produced in Hispanic workshops' },\n        period: { type: 'literal', value: 'late-roman' }\n      }\n    ];\n  }\n  \n  private addAnalyticRegions(response: any): void {\n    response.head.vars = [\"id\", \"name\", \"description\", \"geojson\"];\n    \n    response.results.bindings = [\n      {\n        id: { type: 'literal', value: 'region1' },\n        name: { type: 'literal', value: 'Tarraconensis' },\n        description: { type: 'literal', value: 'Northern region of Roman Hispania' },\n        geojson: { type: 'literal', value: '{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[0,40],[3,40],[3,43],[0,43],[0,40]]]}}' }\n      }\n    ];\n  }\n\n  /**\n   * Helper method to convert an Oxigraph term to a SPARQL JSON result object\n   */\n  private termToObject(term: any): any {\n    // Define result structure with proper TypeScript types\n    const obj: {\n      type: string;\n      value: string;\n      datatype?: string;\n      \"xml:lang\"?: string;\n    } = {\n      type: \"literal\",\n      value: \"\"\n    };\n\n    if (!term) {\n      return obj; // Return default object if term is null/undefined\n    }\n    \n    try {\n      if (oxigraph && term instanceof oxigraph.NamedNode) {\n        obj.type = \"uri\";\n        obj.value = term.value;\n      } else if (oxigraph && term instanceof oxigraph.BlankNode) {\n        obj.type = \"bnode\";\n        obj.value = term.value;\n      } else if (oxigraph && term instanceof oxigraph.Literal) {\n        obj.type = \"literal\";\n        obj.value = term.value;\n        \n        // Safely add datatype if present\n        if (term.datatype && typeof term.datatype === 'object' && 'value' in term.datatype) {\n          obj.datatype = term.datatype.value;\n        }\n        \n        // Safely add language tag if present\n        if (term.language) {\n          obj[\"xml:lang\"] = term.language;\n        }\n      } else if (oxigraph && term instanceof oxigraph.DefaultGraph) {\n        obj.type = \"uri\";\n        obj.value = \"default\";\n      } else if (typeof term === 'string') {\n        obj.type = \"literal\";\n        obj.value = term;\n      } else {\n        obj.value = String(term);\n      }\n    } catch (error) {\n      console.error(\"Error processing term:\", error);\n      // Return default values in case of error\n      obj.type = \"literal\";\n      obj.value = term ? String(term) : \"\";\n    }\n    \n    return obj;\n  }\n}\n\n// Create and export a singleton instance\nexport const mockTriplestore = new MockTriplestore();", "// graph-store.ts\nimport { mockTriplestore } from \"./mock-triplestore\";\n\n// Attempt to dynamically import oxigraph\nlet oxigraph: any;\ntry {\n  import('oxigraph/web.js').then(module => {\n    oxigraph = module;\n    console.log(\"Oxigraph module loaded successfully in graph-store\");\n  }).catch(error => {\n    console.error(\"Failed to load oxigraph module in graph-store:\", error);\n  });\n} catch (error) {\n  console.error(\"Error importing oxigraph in graph-store:\", error);\n}\n\n// Define a type for Term\nexport type Term = any;\n\nexport default class GraphStore {\n  store: any = null;\n  private endpoint: string;\n  private useMock: boolean;\n\n  constructor(endpoint: string = \"http://localhost:3030/sites/query\", useMock: boolean = true) {\n    this.endpoint = endpoint;\n    this.useMock = useMock;\n    \n    // Try to create store if oxigraph is available\n    setTimeout(() => {\n      try {\n        if (oxigraph) {\n          console.log(\"Creating oxigraph store in GraphStore\");\n          this.store = new oxigraph.Store();\n          console.log(\"Successfully created oxigraph store in GraphStore\");\n        }\n      } catch (error) {\n        console.error(\"Failed to create oxigraph store in GraphStore:\", error);\n      }\n    }, 500); // Delay store creation to allow for dynamic import\n\n    // Initialize mock triplestore if using mock\n    if (this.useMock) {\n      console.log(\"Initializing mock triplestore in GraphStore\");\n      mockTriplestore.initialize(\"/data.ttl\").catch(error => {\n        console.error(\"Failed to initialize mock triplestore:\", error);\n      });\n    }\n  }\n\n  async query(sparqlQuery: string, params: Record<string, string> = {}): Promise<Map<string, Term>[]> {\n    try {\n      // Replace parameters in the query if any\n      let processedQuery = sparqlQuery;\n      for (const [key, value] of Object.entries(params)) {\n        const paramPlaceholder = `?${key}Param`;\n        processedQuery = processedQuery.replace(new RegExp(paramPlaceholder, 'g'), `\"${value}\"`);\n      }\n\n      let results;\n\n      if (this.useMock) {\n        // Use mock triplestore\n        console.log(\"Using mock triplestore for query\");\n        results = mockTriplestore.executeQuery(processedQuery);\n      } else {\n        // Use real SPARQL endpoint\n        try {\n          console.log(\"Using real SPARQL endpoint\");\n          const response = await fetch(this.endpoint, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/sparql-query',\n              'Accept': 'application/sparql-results+json'\n            },\n            body: processedQuery\n          });\n\n          if (!response.ok) {\n            throw new Error(`SPARQL query failed: ${response.status} ${response.statusText}`);\n          }\n\n          results = await response.json();\n        } catch (endpointError) {\n          console.error(\"Error with SPARQL endpoint, falling back to mock:\", endpointError);\n          results = mockTriplestore.executeQuery(processedQuery);\n        }\n      }\n\n      const bindings: Map<string, Term>[] = [];\n\n      // Convert SPARQL results to the expected format\n      if (results.results && results.results.bindings) {\n        for (const binding of results.results.bindings) {\n          const bindingMap = new Map<string, Term>();\n          \n          for (const [key, value] of Object.entries(binding)) {\n            bindingMap.set(key, value);\n          }\n          \n          bindings.push(bindingMap);\n        }\n      }\n\n      return bindings;\n    } catch (error) {\n      console.error(\"Error executing SPARQL query:\", error);\n      return []; // Return empty array on error\n    }\n  }\n}"],
  "mappings": "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",
  "names": ["ptr", "module", "quad", "module", "oxigraph", "module", "main"]
}
